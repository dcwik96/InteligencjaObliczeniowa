summary
summary(ve)
summary[1]
E
vep[, num6]
ve[, num6]
ve$num6
cat(ve$num6 != false)
getElement(ve, "num6")
ve
ve$num6
getElement(ve[1], "num6")
getElement(ve[1], num6)
getElement(ve, num6)
getElement(ve, "num6")
values
values <- read.table("/home/dcwik/Pulpit/InteligencjaObliczeniowa/Projekt1/duzo.txt", header = FALSE)
values <- values[,-4]
zmiana <- mapply(values, FUN=as.numeric)
values <- matrix(data = zmiana, ncol = "iloscKolumn", nrow="iloscWierszy")
values <- matrix(data = zmiana, ncol = 3, nrow=403)
fitnessFunc <- function(chromosome) {
counter = 0
result = FALSE
for(i in 1:nrow(values)){
row <- values[i,]
row_1 <- abs(row[1])
row_2 <- abs(row[2])
row_3 <- abs(row[3])
x1 = chromosome[row_1]
if(row[1] < 0){ x1 = !x1 }
if(x1 == 1) {
counter = counter +1
}
else {
x2 = chromosome[row_2]
if(row[2] < 0){ x2 = !x2 }
if(x2 == 1) {
counter = counter +1
}
else {
x3 = chromosome[row_3]
if(row[3] < 0){ x3 = !x3 }
if(x3 == 1) {
counter = counter +1
}
}
}
}
return(-counter)
}
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
library(genalg)
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
plot(GAmodel)
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 1, elitism = T, evalFunc = fitnessFunc)
plot(GAmodel)
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = F, evalFunc = fitnessFunc)
plot(GAmodel)
GAmodel
time <- system.time(rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc))
time
time <- system.time(rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = F, evalFunc = fitnessFunc))
time
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
plot(GAmodel)
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
plot(GAmodel)
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
plot(GAmodel)
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = F, evalFunc = fitnessFunc)
plot(GAmodel)
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = F, evalFunc = fitnessFunc)
plot(GAmodel)
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = F, evalFunc = fitnessFunc)
plot(GAmodel)
GAmodel <- rbga.bin(size = 100, popSize = 500, iters = 100,
mutationChance = 0.01, elitism = F, evalFunc = fitnessFunc)
GAmodel <- rbga.bin(size = 100, popSize = 200, iters = 100,
mutationChance = 0.01, elitism = F, evalFunc = fitnessFunc)
plot(GAmodel)
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 1000,
mutationChance = 0.01, elitism = F, evalFunc = fitnessFunc)
plot(GAmodel)
GAmodel
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 1000,
mutationChance = 0.01, elitism = F, evalFunc = fitnessFunc)
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 500,
mutationChance = 0.01, elitism = F, evalFunc = fitnessFunc)
plot(GAmodel)
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 500,
mutationChance = 0.03, elitism = F, evalFunc = fitnessFunc)
plot(GAmodel)
time <- system.time(rbga.bin(size = 100, popSize = 50, iters = 1000,
mutationChance = 0.01, elitism = F, evalFunc = fitnessFunc))
time
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 1000,
mutationChance = 0.03, elitism = F, evalFunc = fitnessFunc)
GAmodel
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 1000,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
dane <- data.frame(wielkosc = c(), czas = c())
dane
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 0.03, elitism = F, evalFunc = fitnessFunc)
values <- read.table("/home/dcwik/Pulpit/InteligencjaObliczeniowa/Projekt1/50.cnf", header = FALSE)
values <- read.table("/home/dcwik/Pulpit/InteligencjaObliczeniowa/Projekt1/wartosci.cnf", header = FALSE)
values <- read.table("/home/dcwik/Pulpit/InteligencjaObliczeniowa/Projekt1/50.cnf", header = FALSE)
values <- read.table("/home/dcwik/Pulpit/InteligencjaObliczeniowa/Projekt1/50.cnf", header = FALSE)
values <- values[,-4]
zmiana <- mapply(values, FUN=as.numeric)
values <- matrix(data = zmiana, ncol = "iloscKolumn", nrow="iloscWierszy")
values <- matrix(data = zmiana, ncol = 3, nrow=218)
fitnessFunc <- function(chromosome) {
counter = 0
result = FALSE
for(i in 1:nrow(values)){
row <- values[i,]
row_1 <- abs(row[1])
row_2 <- abs(row[2])
row_3 <- abs(row[3])
x1 = chromosome[row_1]
if(row[1] < 0){ x1 = !x1 }
if(x1 == 1) {
counter = counter +1
}
else {
x2 = chromosome[row_2]
if(row[2] < 0){ x2 = !x2 }
if(x2 == 1) {
counter = counter +1
}
else {
x3 = chromosome[row_3]
if(row[3] < 0){ x3 = !x3 }
if(x3 == 1) {
counter = counter +1
}
}
}
}
return(-counter)
}
GAmodel <- rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
time <- system.time(rbga.bin(size = "iloscZmiennyc", popSize = 200, iters = 200,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc))
time <- system.time(rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc))
dane <- rbind(dane, (GAmodel$size, getElement(time, "user.self")))
dane <- rbind(dane, c(GAmodel$size, getElement(time, "user.self")))
dane
remove(dane)
dane <- data.frame(wielkosc = c(GAmodel$size), czas = c(getElement(time, "user.self")))
dane
values <- read.table("/home/dcwik/Pulpit/InteligencjaObliczeniowa/Projekt1/75.cnf", header = FALSE)
values <- matrix(data = zmiana, ncol = 3, nrow=218)
values <- values[,-4]
zmiana <- mapply(values, FUN=as.numeric)
values <- matrix(data = zmiana, ncol = 3, nrow=325)
values <- read.table("/home/dcwik/Pulpit/InteligencjaObliczeniowa/Projekt1/75.cnf", header = FALSE)
values <- values[,-4]
zmiana <- mapply(values, FUN=as.numeric)
values <- matrix(data = zmiana, ncol = 3, nrow=325)
GAmodel <- rbga.bin(size = 75, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
GAmodel
plot
plot(GAmodel)
time <- system.time(rbga.bin(size = 75, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc))
dane <- rbind(dane, c(GAmodel$size, getElement(time, "user.self")))
dane
values <- read.table("/home/dcwik/Pulpit/InteligencjaObliczeniowa/Projekt1/100.cnf", header = FALSE)
values <- values[,-4]
zmiana <- mapply(values, FUN=as.numeric)
values <- matrix(data = zmiana, ncol = 3, nrow=430)
GAmodel <- rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
time <- system.time(rbga.bin(size = 100, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc))
dane <- rbind(dane, c(GAmodel$size, getElement(time, "user.self")))
dane
time
values <- read.table("/home/dcwik/Pulpit/InteligencjaObliczeniowa/Projekt1/125.cnf", header = FALSE)
values <- values[,-4]
zmiana <- mapply(values, FUN=as.numeric)
values <- matrix(data = zmiana, ncol = 3, nrow="iloscWierszy")
values <- matrix(data = zmiana, ncol = 3, nrow=538)
GAmodel <- rbga.bin(size = 125, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
time <- system.time(rbga.bin(size = 125, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc))
dane <- rbind(dane, c(GAmodel$size, getElement(time, "user.self")))
dane
GAmodel
plot(GAmodel)
dane
values <- read.table("/home/dcwik/Pulpit/InteligencjaObliczeniowa/Projekt1/150.cnf", header = FALSE)
values <- values[,-4]
zmiana <- mapply(values, FUN=as.numeric)
values <- matrix(data = zmiana, ncol = 3, nrow = 645)
values
GAmodel <- rbga.bin(size = 150, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
time <- system.time(rbga.bin(size = 150, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc))
dane <- rbind(dane, c(GAmodel$size, getElement(time, "user.self")))
ne
dane
values <- read.table("/home/dcwik/Pulpit/InteligencjaObliczeniowa/Projekt1/175.cnf", header = FALSE)
values <- values[,-4]
zmiana <- mapply(values, FUN=as.numeric)
values <- matrix(data = zmiana, ncol = 3, nrow=753)
GAmodel <- rbga.bin(size = 753, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
time <- system.time(rbga.bin(size = "iloscZmiennyc", popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc))
GAmodel <- rbga.bin(size = 175, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
GAmodel
time <- system.time(rbga.bin(size = 175, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc))
dane <- rbind(dane, c(GAmodel$size, getElement(time, "user.self")))
dane
chartData <- data.frame(wielkosc = dane$wielkosc, czas = dane$czas)
chartData
plot(chartData$wielkosc,chartData$czas, type = "l", main = "Porównanie czasu działania róznych intancji", xlab = "Wielkość problemu", ylab = "Czas działania algorytmu", col = "red")
savehistory("~/Pulpit/InteligencjaObliczeniowa/Projekt1/HISTORIA.Rhistory")
values
values <- read.table("/home/dcwik/Pulpit/InteligencjaObliczeniowa/Projekt1/wartosci.cnf", header = FALSE)
values <- read.table("/home/dcwik/Pulpit/InteligencjaObliczeniowa/Projekt1/50.cnf", header = FALSE)
values <- values[,-4]
zmiana <- mapply(values, FUN=as.numeric)
values <- matrix(data = zmiana, ncol = 3, nrow="iloscWierszy")
values <- matrix(data = zmiana, ncol = 3, nrow=218)
fitnessFunc()
View(fitnessFunc)
View(fitnessFunc)
remove(dane)
GAmodel <- rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
library(genalg)
GAmodel <- rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc)
GAmodel
time <- system.time(rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc))
time
time <- system.time(rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.01, elitism = T, evalFunc = fitnessFunc))
time
GAmodel
values.length()
nrow(values)
nrow(values)+GAmodel$best
nrow(values)+GAmodel$best[100]
chartData
dane <- data.frame(
mutacja = c(0.01),
czas = c(getElement(time, "user.self"))
dokladnosc = c(nrow(values)+GAmodel$best[100])
)
time
dane <- data.frame(
mutacja = 0.01,
czas = getElement(time, "user.self"),
dokladnosc = nrow(values)+GAmodel$best[100]
)
dane
GAmodel <- rbga.bin(size = "iloscZmiennyc", popSize = 50, iters = 100,
mutationChance = 0.02, elitism = T, evalFunc = fitnessFunc)
GAmodel <- rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.02, elitism = T, evalFunc = fitnessFunc)
time <- system.time(rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.02, elitism = T, evalFunc = fitnessFunc))
dane <- rbind(dane, c(0.02, getElement(time, "user.self"), nrow(values)+GAmodel$best[100]))
dane
time <- system.time(rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.02, elitism = T, evalFunc = fitnessFunc))
time
GAmodel <- rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.03, elitism = T, evalFunc = fitnessFunc)
time <- system.time(rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.03, elitism = T, evalFunc = fitnessFunc))
dane <- rbind(dane, c(0.02, getElement(time, "user.self"), nrow(values)+GAmodel$best[100]))
dane
GAmodel <- rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.03, elitism = T, evalFunc = fitnessFunc)
GAmodel
dane
dane = dane[-nrow(dane),]
dane
dane <- rbind(dane, c(0.02, getElement(time, "user.self"), nrow(values)+GAmodel$best[100]))
dane
GAmodel <- rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.04, elitism = T, evalFunc = fitnessFunc)
dane = dane[-nrow(dane),]
dane <- rbind(dane, c(0.03, getElement(time, "user.self"), nrow(values)+GAmodel$best[100]))
dane
time <- system.time(rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.04, elitism = T, evalFunc = fitnessFunc))
dane <- rbind(dane, c(0.04, getElement(time, "user.self"), nrow(values)+GAmodel$best[100]))
dane
GAmodel <- rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.05, elitism = T, evalFunc = fitnessFunc)
time <- system.time(rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.05, elitism = T, evalFunc = fitnessFunc))
dane <- rbind(dane, c(0.05, getElement(time, "user.self"), nrow(values)+GAmodel$best[100]))
GAmodel <- rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.06, elitism = T, evalFunc = fitnessFunc)
time <- system.time(rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.06, elitism = T, evalFunc = fitnessFunc))
dane <- rbind(dane, c(0.06, getElement(time, "user.self"), nrow(values)+GAmodel$best[100]))
dane
plot(GAmodel)
GAmodel
GAmodel <- rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.1, elitism = T, evalFunc = fitnessFunc)
GAmodel$best[100]
plot(GAmodel)
GAmodel <- rbga.bin(size = 50, popSize = 50, iters = 100,
mutationChance = 0.2, elitism = T, evalFunc = fitnessFunc)
plot(GAmodel)
View(dirty.iris)
View(dane)
View(chartData)
library(editrules)
library(editrules)
library(deducorrect)
install.packages(deducorrect)
install.packages("deducorrect")
library(deducorrect)
getwd
getwd()
dirty.iris <- read.csv("/dirty_iris.csv", header=TRUE, sep=",")
dirty.iris <- read.csv("dirty_iris.csv", header=TRUE, sep=",")
dirty.iris
full.records <- nrow(subset(dirty.iris, is.finite(Sepal.Length) &
is.finite(Sepal.Width) &
is.finite(Petal.Length) &
is.finite(Petal.Width)))
full.records
E <- editset(c("Sepal.Length <= 30",
"Sepal.Length > 0",
"Sepal.Length > Petal.Length",
"Sepal.Width > 0",
"Petal.Length > 0",
"Petal.Length >= 2 * Petal.Width",
"Petal.Width > 0",
"Species %in% c('setosa', 'versicolor', 'virginica')"))
E
ve <-violatedEdits(E, dirty.iris)
summary(ve)
R <- correctionRules("rules.txt")
corrected.iris <- correctWithRules(R, dirty.iris)
corrected.iris <- correctWithRules(R, dirty.iris)
corrected.iris <- correctWithRules(R, dirty.iris)
corrected.iris <- correctWithRules(R, dirty.iris)
R
remove(R)
R <- correctionRules("rules.txt")
R
corrected.iris
corrected.iris <- correctWithRules(R, dirty.iris)
corrected.iris
x <- data.frame(corrected.iris[1])
for(i in 1:4) {
x[,i] <- impute(x[,i], mean)
}
View(chartData)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
for(i in 1:4) {
x[,i] <- impute(x[,i], mean)
}
clean.iris.mean <- x
clean.iris.mean
y <- data.frame(corrected.iris[1])
clean.iris.knn <- kNN(y)
install.packages("VIM")
library(VIM)
library("VIM")
library("VIM")
library(VIM)
install.packages("VIM")
library(VIM)
clean.iris.knn <- kNN(y)
tmp <- iris
for(i in 1:4) {
tmp[,i] <- log(tmp[,i])
}
iris.log <- tmp
iris.log
for(i in 1:4) {
tmp[,i] <- scale(tmp[,i])
}
iris.log.scale <- tmp
iris.log.scale
nazwy <- iris.log.scale[,5]
iris.log.scale <- iris.log.scale[,-5]
iris.log.scale
iris.pca <- prcomp(iris.log.scale)
iris.pca[1]
iris.pca[2]
iris.pca[2]$rotation
iris.predict <- predict(iris.pca)
iris.predict <- iris.predict[, c(-3, -4)] #usuwamy PC3 i PC4
iris.predict <- data.frame(iris.predict) #przerabiamy na data frame
iris.predict$nazwy <- nazwy #dodajemy kolumne z nazwami
x <- iris.predict[,1]
y <- iris.predict[,2]
n <- iris.predict[,3]
plot(x, y, col=c("red", "blue", "green")[n], pch=19, xlab="PC1", ylab="PC2")
legend(x="topright", legend=unique(n), pch=19, col=c("red", "blue", "green"))
save.image("~/Pulpit/InteligencjaObliczeniowa/Lab04/history.RData")
savehistory("~/Pulpit/InteligencjaObliczeniowa/Lab04/history.RData")
